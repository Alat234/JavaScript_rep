console.log(`
    =================== –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ó –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø ===================
    –§—É–Ω–∫—Ü—ñ—è triangle(–∑–Ω–∞—á–µ–Ω–Ω—è1, —Ç–∏–ø1, –∑–Ω–∞—á–µ–Ω–Ω—è2, —Ç–∏–ø2) —Ä–æ–∑–≤'—è–∑—É—î 
    –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫, –∑–Ω–∞—Ö–æ–¥—è—á–∏ –≤—Å—ñ —Å—Ç–æ—Ä–æ–Ω–∏ —Ç–∞ –≥–æ—Å—Ç—Ä—ñ –∫—É—Ç–∏.
    
    ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
      1Ô∏è‚É£ –∑–Ω–∞—á–µ–Ω–Ω—è1 ‚Äì —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –≤—ñ–¥–æ–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
      2Ô∏è‚É£ —Ç–∏–ø1 ‚Äì —Ç–∏–ø –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (—Ä—è–¥–æ–∫).
      3Ô∏è‚É£ –∑–Ω–∞—á–µ–Ω–Ω—è2 ‚Äì —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –≤—ñ–¥–æ–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
      4Ô∏è‚É£ —Ç–∏–ø2 ‚Äì —Ç–∏–ø –¥—Ä—É–≥–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ (—Ä—è–¥–æ–∫).
    
    üìã –ú–æ–∂–ª–∏–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ (—Ç–∏–ø1 —Ç–∞ —Ç–∏–ø2):
      - "leg"             ‚Äì –∫–∞—Ç–µ—Ç
      - "hypotenuse"      ‚Äì –≥—ñ–ø–æ—Ç–µ–Ω—É–∑–∞
      - "adjacent angle"  ‚Äì –ø—Ä–∏–ª–µ–≥–ª–∏–π –¥–æ –∫–∞—Ç–µ—Ç–∞ –∫—É—Ç (—É –≥—Ä–∞–¥—É—Å–∞—Ö)
      - "opposite angle"  ‚Äì –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –¥–æ –∫–∞—Ç–µ—Ç–∞ –∫—É—Ç (—É –≥—Ä–∞–¥—É—Å–∞—Ö)
      - "angle"           ‚Äì –æ–¥–∏–Ω –∑ –¥–≤–æ—Ö –≥–æ—Å—Ç—Ä–∏—Ö –∫—É—Ç—ñ–≤ (–∫–æ–ª–∏ –∑–∞–¥–∞–Ω–∞ –≥—ñ–ø–æ—Ç–µ–Ω—É–∑–∞)
    
    üìù –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
      triangle(3, "leg", 4, "leg");
      triangle(5, "leg", 30, "adjacent angle");
      triangle(10, "hypotenuse", 45, "angle");
    
    üîî –ü—Ä–∏–º—ñ—Ç–∫–∞:
      - –ó–Ω–∞—á–µ–Ω–Ω—è –∫—É—Ç—ñ–≤ –≤–≤–æ–¥—è—Ç—å—Å—è —É –≥—Ä–∞–¥—É—Å–∞—Ö.
      - –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç –∑ —É—Å—ñ–º–∞ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ —Ç–∞ –∫—É—Ç–∞–º–∏.
    ===============================================================
    `);

function triangle(value1, type1, value2, type2) {
    let a, b, c, alpha, beta;

    if (value1 <= 0 || value2 <= 0) {
        console.log("incorrect value. value < 0");
        return "failed";
    }

    // –ì—ñ–ø–æ—Ç–µ–Ω—É–∑–∞ + –∫–∞—Ç–µ—Ç
    if ((type1 === "leg" && type2 === "hypotenuse") || (type1 === "hypotenuse" && type2 === "leg")) {
        if (type1 === "leg") {
            a = value1;
            c = value2;
        } else {
            a = value2;
            c = value1;
        }

        if (c <= a) {
            console.log("incorrect value. hypotenuse < leg");
            return "failed";
        }
       

        b = Math.sqrt(c * c - a * a);
        alpha = (Math.asin(a / c) * 180) / Math.PI;
        beta = (Math.asin(b / c) * 180) / Math.PI;
        if(beta==0||alpha==0||beta==90||alpha==90 ){
            console.log("incorrect value of sides");
            return "failed";
        }
        Print();
        return "success"

    // –î–≤–∞ –∫–∞—Ç–µ—Ç–∏
    } else if (type1 === "leg" && type2 === "leg") {
        a = value1;
        b = value2;
        c = Math.sqrt(a * a + b * b);
        alpha = (Math.asin(a / c) * 180) / Math.PI;
        beta = (Math.asin(b / c) * 180) / Math.PI;
        
        if(beta==0||alpha==0||beta==90||alpha==90 ){
            console.log("incorrect value of sides");
            return "failed";
        }
        Print();
        return "success";

    // –ö–∞—Ç–µ—Ç —ñ –ø—Ä–∏–ª–µ–≥–ª–∏–π –∫—É—Ç
    } else if ((type1 === "leg" && type2 === "adjacent angle") || (type1 === "adjacent angle" && type2 === "leg")) {
        if (type1 === "leg") {
            b = value1;
            alpha = value2;
        } else {
            alpha = value1;
            b = value2;
        }

        if (alpha >= 90) {
            console.log("incorrect value. angle has to be < 90");
            return "failed";
        }

        let alphaInRadians = (alpha * Math.PI) / 180;
        c = b / Math.cos(alphaInRadians);
        a = Math.sqrt(c * c - b * b);
        beta = 90 - alpha;
        Print();
        return "success"

    // –ö–∞—Ç–µ—Ç —ñ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –∫—É—Ç
    } else if ((type1 === "leg" && type2 === "opposite angle") || (type1 === "opposite angle" && type2 === "leg")) {
        if (type1 === "leg") {
            b = value1;
            beta = value2;
        } else {
            beta = value1;
            b = value2;
        }

        if (beta >= 90) {
            console.log("incorrect value. angle has to be < 90");
            return "failed";
        }

        alpha = 90 - beta;
        let betaInRadians = (beta * Math.PI) / 180;
        c = b / Math.sin(betaInRadians);
        a = Math.sqrt(c * c - b * b);
        Print();
        return "success";

    // –ì—ñ–ø–æ—Ç–µ–Ω—É–∑–∞ —ñ –∫—É—Ç
    } else if ((type1 === "hypotenuse" && type2 === "angle") || (type1 === "angle" && type2 === "hypotenuse")) {
        if (type1 === "hypotenuse") {
            c = value1;
            beta = value2;
        } else {
            beta = value1;
            c = value2;
        }

        if (beta >= 90) {
            console.log("incorrect value. angle has to be < 90");
            return "failed";
        }

        alpha = 90 - beta;
        let alphaInRadians = (alpha * Math.PI) / 180;
        a = c * Math.sin(alphaInRadians);
        b = c * Math.cos(alphaInRadians);
        Print();
        return "success";

    } else {
        console.log("incorrect type or couple of type");
        return "failed";
    }

    function Print() {
        
        console.log("a ="+a);
        console.log("b ="+b);
        console.log("c ="+c);
        console.log("alpha ="+alpha);
        console.log("beta =" +beta);
    }
}
